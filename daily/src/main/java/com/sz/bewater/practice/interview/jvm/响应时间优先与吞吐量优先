响应时间优先（减少单次垃圾回收的停顿时间）
目标：减少每次垃圾回收操作导致的应用程序停顿时间，以便应用程序能够快速响应用户请求。
特点：
减少停顿时间：每次垃圾回收尽量减少对应用程序的停顿时间。
增加回收频率：为了保持较低的单次停顿时间，可能会增加垃圾回收的频率。
适用场景：对延迟敏感的应用程序，例如在线交易系统、互动性强的Web应用和实时系统。
示例垃圾回收器：
CMS（Concurrent Mark-Sweep）：通过并发标记和并发清除减少单次停顿时间。
G1（Garbage-First）：通过区域化回收和并发标记减少单次停顿时间。
示例：一个在线购物网站希望用户在点击按钮后能迅速看到结果，因此采用CMS或G1垃圾回收器。




吞吐量优先（减少总体的垃圾回收的停顿时间）
目标：减少应用程序因垃圾回收引起的累计停顿时间，使系统在单位时间内处理更多的任务或请求。
特点：
减少总停顿时间：总体上减少应用程序因垃圾回收引起的累计停顿时间。
较长单次停顿时间：每次垃圾回收可能会有较长的停顿时间，但总的垃圾回收次数减少。
适用场景：对吞吐量敏感的应用程序，例如批处理系统、大数据处理和后台任务。
示例垃圾回收器：
Parallel GC：通过多线程并行回收，在短时间内完成垃圾回收任务，从而减少总的停顿时间。
示例：一个大数据处理系统希望在单位时间内处理更多的数据任务，因此采用Parallel GC垃圾回收器。



总结
响应时间优先：侧重于减少单次垃圾回收的停顿时间，即使这会增加垃圾回收的次数。适用于需要快速响应用户请求的应用程序。
吞吐量优先：侧重于减少总体的垃圾回收的停顿时间，即使这会导致每次垃圾回收的停顿时间较长。适用于需要处理大量任务的应用程序