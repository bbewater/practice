CyclicBarrier 能做到的事情
阶段性同步：
CyclicBarrier 可以在每个阶段结束时同步所有参与的线程，并在每个阶段结束时执行回调操作。这是 CountDownLatch 无法做到的。
可重用性：
CyclicBarrier 可以多次重用，即线程可以反复等待同一个屏障点，这是 CountDownLatch 所不具备的。
回调功能：
CyclicBarrier 可以在所有线程到达屏障点时执行一个回调操作，这个回调是在最后一个线程到达屏障点时执行的。


CountDownLatch 能做到的事情
一次性同步：
CountDownLatch 可以用于一次性同步，即一个线程等待其他多个线程完成任务，或者多个线程等待某个任务完成。
简单的计数器机制：
CountDownLatch 提供了一个简单的计数器机制，方便实现一些简单的线程同步需求。


使用场景比较
CyclicBarrier 的使用场景：
需要在多个阶段中同步一组线程，每个阶段结束时需要同步。
需要在所有线程到达屏障点时执行回调操作。
适用于需要反复同步的场景，如并行计算中的分阶段处理。

CountDownLatch 的使用场景：
需要在一个线程完成某些初始化任务后，其他多个线程才能继续执行。
需要一个线程等待多个线程完成任务后再继续执行。
适用于一次性的同步需求，如系统初始化或任务调度。