1.加载（Loading）
在加载阶段，JVM执行以下操作：
通过类加载器加载类文件：将类文件（.class文件）从文件系统或网络等资源加载到内存中。
将类文件的二进制数据读入内存：将类文件中的字节码加载到方法区（Method Area）。
生成代表这个类的Class对象：在堆内存中创建一个Class对象，作为对该类的访问入口。

2.链接（Linking）
链接阶段包含三个步骤：验证、准备和解析。
2.1验证（Verification）：
验证类文件的正确性和合法性，确保其符合JVM规范并且不会危害JVM安全。
包括文件格式验证、元数据验证、字节码验证和符号引用验证。
2.2准备（Preparation）：
为类的静态变量分配内存，并设置默认初始值（默认值通常是零值，如int的默认值是0，引用类型的默认值是null）。
注意：这一步分配的只是初始的默认值，不是静态变量的初始化值。实际的初始化值会在初始化阶段设置。
2.3解析（Resolution）：
将常量池中的符号引用替换为直接引用。（每个类都有自己的类文件常量池 类名 方法名 字符串字面量 都是符号引用 也称间接引用 不同于字符串常量池）
符号引用是以字符串等形式存在的间接引用，直接引用则是指向实际内存地址或偏移量的引用。

3.初始化（Initialization）
初始化阶段执行类的初始化方法（即<clinit>方法），包括以下步骤：
3.1静态变量初始化：
按照源代码中的顺序，给静态变量赋予用户定义的初始值。
3.2执行静态代码块：
按照源代码中的顺序，执行静态代码块。
这个阶段是类加载过程中的最后一步，之后类就可以被使用了。


总结：
加载：JVM将所需的类加载到内存中。
链接：
验证：验证class文件的合法性。
准备：为类中的静态变量分配内存并赋予初始值（默认值）。
解析：将类的常量池中的符号引用替换成直接引用。
初始化：对静态变量赋予用户定义的初始值并执行静态代码块。